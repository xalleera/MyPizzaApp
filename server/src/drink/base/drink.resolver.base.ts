/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDrinkArgs } from "./CreateDrinkArgs";
import { UpdateDrinkArgs } from "./UpdateDrinkArgs";
import { DeleteDrinkArgs } from "./DeleteDrinkArgs";
import { DrinkFindManyArgs } from "./DrinkFindManyArgs";
import { DrinkFindUniqueArgs } from "./DrinkFindUniqueArgs";
import { Drink } from "./Drink";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { DrinkService } from "../drink.service";

@graphql.Resolver(() => Drink)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class DrinkResolverBase {
  constructor(
    protected readonly service: DrinkService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Drink",
    action: "read",
    possession: "any",
  })
  async _drinksMeta(
    @graphql.Args() args: DrinkFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Drink])
  @nestAccessControl.UseRoles({
    resource: "Drink",
    action: "read",
    possession: "any",
  })
  async drinks(@graphql.Args() args: DrinkFindManyArgs): Promise<Drink[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Drink, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Drink",
    action: "read",
    possession: "own",
  })
  async drink(
    @graphql.Args() args: DrinkFindUniqueArgs
  ): Promise<Drink | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Drink)
  @nestAccessControl.UseRoles({
    resource: "Drink",
    action: "create",
    possession: "any",
  })
  async createDrink(@graphql.Args() args: CreateDrinkArgs): Promise<Drink> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Drink)
  @nestAccessControl.UseRoles({
    resource: "Drink",
    action: "update",
    possession: "any",
  })
  async updateDrink(
    @graphql.Args() args: UpdateDrinkArgs
  ): Promise<Drink | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Drink)
  @nestAccessControl.UseRoles({
    resource: "Drink",
    action: "delete",
    possession: "any",
  })
  async deleteDrink(
    @graphql.Args() args: DeleteDrinkArgs
  ): Promise<Drink | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Order])
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async orders(
    @graphql.Parent() parent: Drink,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
